.TH PREG_GETREP 3 2022-07-09 libregutils "libregutils manual"
.SH NAME
preg_replace, preg_getrep, preg_replen \- libregutils substitution functions
.SH SYNOPSIS
.nf
.B #include <regutils.h>
.PP
.BI "int    preg_replace (Preg *" reg ", const char *" subject ", const char *" \
pattern ",
.in +21en
.BI "const char *" rep )
.in -21en
.BI "char*  preg_getrep  (Preg *" reg )
.BI "size_t preg_replen  (Preg *" reg )
.fi
.SH DESCRIPTION
.PP
.BR preg_replace ()
performs a regex substitution on the
.I subject
string, replacing occurrences of
.I pattern
with
.IR rep .
Before passed to
.BR preg_replace (),
.I reg
should be initialized with
.BR preg_init (3).
You can control various options about the substitution, by calling
.BR preg_setopt (3)
in advance.
.PP
You can include backreferences in the
.I rep
string.
Backreferences are specified with
.IR $n ,
where
.I n
is a number.
Each backreference denotes a portion of the match, with
.I $0
denoting the whole match, and
.I $n
denoting the nth parenthesized subexpression in
.IR pattern .
A literal "$n" in
.I rep
can be specified by escaping it with an extra "$" (e.g., $$3).
.PP
After a successful substitution you can use
.BR preg_getrep ()
to get the substituted subject string.
.PP
.BR preg_replen ()
returns its length.
.PP
Calling
.BR preg_getrep ()
or
.BR preg_replen ()
without a prior successful termination of
.BR preg_replace ()
may cause undefined behavior.
.SH RETURN VALUE
.BR preg_replace ()
returns 0 on success or an error code on failure.
.PP
.BR preg_getrep ()
returns the string of the substituted subject.
.PP
.BR preg_replen ()
returns the length of the substituted subject string.
.SH ERRORS
The following error codes are defined by libregutils for
.BR preg_replace ():
.TP
.B PREG_MEMFAIL
Memory allocation failure
.TP
.B PREG_BADMIN
Min should be greater or equal to 0
.TP
.B PREG_BADLIMIT
Limit should be greater or equal to -1
.TP
.B PREG_BADBREF
Invalid backreference number
.PP
In addition to these,
.BR preg_match ()
may return any of the POSIX-defined error codes that are documented in
.BR regex (3).
.SH EXAMPLE
.EX
#include <stdio.h>
#include <stdlib.h>
#include <regutils.h>

int main(void)
{
    const char* subject = "There's a _ inside the crate";
    Preg* reg;
    int err;
    int exit_code = EXIT_FAILURE;

    reg = preg_init();
    if (reg) {
        err = preg_replace(reg, subject, "_ inside the c([[:alpha:]]+)e",
                           "$1 inside the crate");
        if (err)
            printf("An error occurred: %s\\n", preg_errmsg(reg));
        else {
            printf("Success: %s\\n", preg_getrep(reg));
            exit_code = EXIT_SUCCESS;
        }

        preg_free(reg);
    }

    exit(exit_code);
}
.EE
.SH SEE ALSO
.BR preg_init (3),
.BR preg_errmsg (3),
.BR preg_setopt (3),
.BR preg_match (3),
.BR preg_split (3),
.BR preg_escape (3)
